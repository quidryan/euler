plugins {
    id("org.jetbrains.kotlin.jvm") version "1.5.31"
    id "nebula.release" version "16.0.0"
    id 'nebula.contacts' version '6.0.0'
    id 'nebula.info' version '11.2.0'
    id 'nebula.maven-publish' version '17.0.0'
    id 'nebula.maven-apache-license' version '17.0.0'
    id "maven-publish"
    id "signing"
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
}

contacts {
    'justin@halfempty.org' {
        moniker 'Justin Ryan'
        github 'quidryan'
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

group = 'org.halfempty'
description = 'Euler Problem solutions'

repositories {
    mavenCentral()
}

dependencies {
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}